# Comprehensive clang-tidy configuration for C development
# Enable C-specific checks only
Checks: >
  *,
  -abseil-*,
  -android-*,
  -fuchsia-*,
  -google-*,
  -llvm-*,
  -llvmlibc-*,
  -zircon-*,
  -readability-identifier-naming,
  -readability-magic-numbers,
  -readability-uppercase-literal-suffix,
  -modernize-use-trailing-return-type,
  -modernize-use-nodiscard,
  -modernize-concat-nested-namespaces,
  -cppcoreguidelines-*,
  -hicpp-*,
  -misc-*,
  -cert-*,
  -clang-analyzer-*,
  -clang-diagnostic-*,
  -bugprone-dangling-handle,
  -bugprone-exception-escape,
  -bugprone-fold-init-type,
  -bugprone-forward-declaration-namespace,
  -bugprone-forwarding-reference-overload,
  -bugprone-inaccurate-erase,
  -bugprone-lambda-function-name,
  -bugprone-move-forwarding-reference,
  -bugprone-parent-virtual-call,
  -bugprone-sizeof-container,
  -bugprone-string-constructor,
  -bugprone-string-integer-assignment,
  -bugprone-string-literal-with-embedded-nul,
  -bugprone-undelegated-constructor,
  -bugprone-unhandled-self-assignment,
  -bugprone-unhandled-self-move,
  -bugprone-unused-raii,
  -bugprone-use-after-move,
  -bugprone-virtual-near-miss,
  -modernize-avoid-bind,
  -modernize-avoid-c-arrays,
  -modernize-concat-nested-namespaces,
  -modernize-deprecated-headers,
  -modernize-deprecated-ios-base-aliases,
  -modernize-loop-convert,
  -modernize-make-shared,
  -modernize-make-unique,
  -modernize-pass-by-value,
  -modernize-raw-string-literal,
  -modernize-redundant-void-arg,
  -modernize-replace-auto-ptr,
  -modernize-replace-disallow-copy-and-assign-macro,
  -modernize-replace-random-shuffle,
  -modernize-return-braced-init-list,
  -modernize-shrink-to-fit,
  -modernize-unary-static-assert,
  -modernize-use-auto,
  -modernize-use-bool-literals,
  -modernize-use-default-member-init,
  -modernize-use-emplace,
  -modernize-use-equals-default,
  -modernize-use-equals-delete,
  -modernize-use-noexcept,
  -modernize-use-nullptr,
  -modernize-use-override,
  -modernize-use-transparent-functors,
  -modernize-use-uncaught-exceptions,
  -performance-for-range-copy,
  -performance-implicit-conversion-in-loop,
  -performance-no-automatic-move,
  -performance-noexcept-move-constructor,
  -performance-trivially-destructible,
  -performance-unnecessary-copy-initialization,
  -performance-unnecessary-value-param

# Don't treat warnings as errors (useful for gradual adoption)
WarningsAsErrors: ''

# Check all headers
HeaderFilterRegex: '.*'

# Use file-based formatting
FormatStyle: 'file'

# Additional options for C development
CheckOptions:
  # Readability checks
  - key: readability-function-cognitive-complexity
    value: '20'
  - key: readability-function-size
    value: '50'
  - key: readability-identifier-length
    value: '3'
  - key: readability-identifier-naming.FunctionCase
    value: 'camelBack'
  - key: readability-identifier-naming.StructCase
    value: 'CamelCase'
  - key: readability-identifier-naming.TypedefCase
    value: 'CamelCase'
  - key: readability-identifier-naming.VariableCase
    value: 'camelBack'
  - key: readability-identifier-naming.ParameterCase
    value: 'camelBack'
  - key: readability-identifier-naming.MemberCase
    value: 'camelBack'
  
  # Bugprone checks (C-compatible only)
  - key: bugprone-branch-clone
    value: 'true'
  - key: bugprone-incorrect-roundings
    value: 'true'
  - key: bugprone-infinite-loop
    value: 'true'
  - key: bugprone-macro-parentheses
    value: 'true'
  - key: bugprone-macro-repeated-side-effects
    value: 'true'
  - key: bugprone-misplaced-operator-in-strlen-in-alloc
    value: 'true'
  - key: bugprone-misplaced-pointer-arithmetic-in-alloc
    value: 'true'
  - key: bugprone-misplaced-widening-cast
    value: 'true'
  - key: bugprone-multiple-statement-macro
    value: 'true'
  - key: bugprone-narrowing-conversions
    value: 'true'
  - key: bugprone-no-escape
    value: 'true'
  - key: bugprone-not-null-terminated-result
    value: 'true'
  - key: bugprone-posix-return
    value: 'true'
  - key: bugprone-reserved-identifier
    value: 'true'
  - key: bugprone-sizeof-expression
    value: 'true'
  - key: bugprone-spurious-conditional-for-nullptr
    value: 'true'
  - key: bugprone-suspicious-enum-usage
    value: 'true'
  - key: bugprone-suspicious-include
    value: 'true'
  - key: bugprone-suspicious-memset-usage
    value: 'true'
  - key: bugprone-suspicious-missing-comma
    value: 'true'
  - key: bugprone-suspicious-semicolon
    value: 'true'
  - key: bugprone-suspicious-string-compare
    value: 'true'
  - key: bugprone-swapped-arguments
    value: 'true'
  - key: bugprone-terminating-continue
    value: 'true'
  - key: bugprone-throw-keyword-missing
    value: 'true'
  - key: bugprone-too-small-loop-variable
    value: 'true'
  - key: bugprone-unused-return-value
    value: 'true'
  
  # Performance checks (C-compatible only)
  - key: performance-no-int-to-ptr
    value: 'true'
  - key: performance-type-promotion-in-math-fn
    value: 'true'
  
  # Portability checks
  - key: portability-restrict
    value: 'true'
  - key: portability-simd-intrinsics
    value: 'true'